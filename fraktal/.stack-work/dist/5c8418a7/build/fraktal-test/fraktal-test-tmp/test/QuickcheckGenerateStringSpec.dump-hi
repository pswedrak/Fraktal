
==================== FINAL INTERFACE ====================
2018-01-25 16:50:26.0333378 UTC

interface main:QuickcheckGenerateStringSpec 8022
  interface hash: 506547251755c0b12a35d6463d2ae205
  ABI hash: 9011311e757bb61625c0912120eff3fd
  export-list hash: dd29c39c4550ca4088fa68b078e66e5d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5b4b1d110cc7c65d2ef5b1ca35103ed6
  sig of: Nothing
  used TH splices: False
  where
exports:
  QuickcheckGenerateStringSpec.spec
module dependencies:
package dependencies: HUnit-1.6.0.0 QuickCheck-2.10.1 Win32-2.5.4.1
                      ansi-terminal-0.7.1.1 array-0.5.2.0 async-2.1.1.1 base-4.10.1.0
                      base-compat-0.9.3 bytestring-0.10.8.2 call-stack-0.1.0 colour-2.3.4
                      containers-0.5.10.2 deepseq-1.4.3.0 directory-1.3.0.2
                      filepath-1.4.1.2 fraktal-0.1.0.0 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1
                      hspec-2.4.4 hspec-core-2.4.4 hspec-expectations-0.8.2
                      integer-gmp-1.0.1.0 pretty-1.1.3.3 primitive-0.6.2.0
                      quickcheck-io-0.2.0 random-1.1 setenv-0.1.1.3 stm-2.4.4.1
                      template-haskell-2.12.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.2.0
orphans: colour-2.3.4:Data.Colour
         quickcheck-io-0.2.0:Test.QuickCheck.IO
         stm-2.4.4.1:Control.Monad.STM
         transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         hspec-core-2.4.4:Test.Hspec.Core.Example
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0:Control.Monad.Primitive
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.10.1:Test.QuickCheck 016311e8a3bf51421c87b19c827e7c11
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  fraktal-0.1.0.0:GenerateString ee9ff2f82d36fcfbb1b8fdfbbeab175d
import  -/  ghc-prim-0.5.1.1:GHC.Classes 64ad5910d03ab188ab9b4adef7487b1e
import  -/  hspec-2.4.4:Test.Hspec e06e31b4b3b048f359cb544b157310ce
import  -/  hspec-2.4.4:Test.Hspec.QuickCheck b1d1d0d1b548c2d99e3009a965a9e19c
import  -/  hspec-core-2.4.4:Test.Hspec.Core.Spec 999f758db39217fc34765bc8c01bf683
60eeb4624f268630de3558e8f3ab8e6d
  $s$fTestable(->)3 ::
    ([GHC.Types.Char] -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [GHC.Types.Char] -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 QuickcheckGenerateStringSpec.$w$dTestable
                   w
                   ww1
                   ww2
                   ww3
                   ww4
                   w2 }) -}
7d3ab313b86110352bd48d7f202d36ee
  $s$fTestable(->)4 :: [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [GHC.Types.Char]) ->
                 Test.QuickCheck.Arbitrary.shrinkList
                   @ GHC.Types.Char
                   Test.QuickCheck.Arbitrary.$fArbitraryChar_$cshrink
                   eta) -}
8ac6e010c533afc71497a9a860451619
  $s$fTestable(->)5 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [GHC.Types.Char]
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: Test.QuickCheck.Random.QCGen) (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w2 of ww7 { GHC.Types.I# ww8 ->
                 Test.QuickCheck.Gen.$wlistOf
                   @ GHC.Types.Char
                   Test.QuickCheck.Arbitrary.$fArbitraryChar_$carbitrary
                   ww1
                   ww2
                   ww3
                   ww4
                   ww8 } }) -}
6e1e487512ae2d0ffd41fc759ad9b86e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   QuickcheckGenerateStringSpec.$trModule3
                   QuickcheckGenerateStringSpec.$trModule1) -}
ea0b4707b707106acaee3f4831eec89f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   QuickcheckGenerateStringSpec.$trModule2) -}
064948c6ba98c6176a946d0fec9d2fd6
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("QuickcheckGenerateStringSpec"#) -}
ab0cc3d4d33d76f6187ba1a831887f6f
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   QuickcheckGenerateStringSpec.$trModule4) -}
0a0594d2f6cf76885ce9c53e5cc468e5
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
42711e3ce12470cd802254876377e789
  $w$dTestable ::
    ([GHC.Types.Char] -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Char] -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ [GHC.Types.Char]
                   @ GHC.Types.Bool
                   GHC.Show.$fShow[]_$s$fShow[]1
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                [GHC.Types.Char]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Char]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <[GHC.Types.Char] -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                [GHC.Types.Char]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Char]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <[GHC.Types.Char] -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   QuickcheckGenerateStringSpec.$s$fTestable(->)5
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Char]>_R))
                   QuickcheckGenerateStringSpec.$s$fTestable(->)4
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
0a8eef9c05e8f04546ab9da81b21802e
  spec :: Test.Hspec.Core.Spec.Monad.SpecWith ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                QuickcheckGenerateStringSpec.spec1
                  `cast`
                (Trans
                     (Sym (GHC.Types.N:IO[0]
                               <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                    <[Test.Hspec.Core.Tree.SpecTree ()]>_N <GHC.Types.IO>_R <()>_N))
                          (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0] <()>_N) <()>_N))) -}
48acc4eafdf880700c1d461decda8231
  spec1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           [Test.Hspec.Core.Tree.Tree
              (Test.Hspec.Core.Example.ActionWith ())
              (Test.Hspec.Core.Tree.Item ())]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta, QuickcheckGenerateStringSpec.spec2 #)) -}
70258423bf795a8e143df52895897cbb
  spec10 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (Test.Hspec.Core.Tree.specItem13
                   QuickcheckGenerateStringSpec.spec11) -}
ada07ff020f19b2b57bff915da226569
  spec11 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem11
                   Test.Hspec.Core.Tree.specItem3
                   QuickcheckGenerateStringSpec.spec12) -}
8aab18235695da513c856aad4acbc0cb
  spec12 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it1
                   QuickcheckGenerateStringSpec.spec13) -}
5a6ce1dfbee06bbdc55aa904a12d8626
  spec13 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.QuickCheck.prop9
                   Test.Hspec.QuickCheck.prop1
                   QuickcheckGenerateStringSpec.spec14) -}
156d80fc9f44afd9bd489dc6f1947626
  spec14 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   QuickcheckGenerateStringSpec.spec23
                   QuickcheckGenerateStringSpec.spec15
                   GHC.Stack.Types.EmptyCallStack) -}
742dd130c7c55a2b84146f52312dd769
  spec15 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   QuickcheckGenerateStringSpec.spec22
                   QuickcheckGenerateStringSpec.spec21
                   QuickcheckGenerateStringSpec.spec19
                   QuickcheckGenerateStringSpec.spec18
                   QuickcheckGenerateStringSpec.spec17
                   QuickcheckGenerateStringSpec.spec18
                   QuickcheckGenerateStringSpec.spec16) -}
5189dbad0a0b5901b65ce8f79cd19a76
  spec16 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 22#) -}
08c29130349e9f630eafc62204b89b6e
  spec17 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
2fbe07110148cfc44ede66b61d90ead9
  spec18 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
fcd63c5f7ae164f6314e931ac70dcc16
  spec19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   QuickcheckGenerateStringSpec.spec20) -}
7dffb3940f84ba4eab287f4c3117abfb
  spec2 ::
    ((),
     [Test.Hspec.Core.Tree.Tree
        (Test.Hspec.Core.Example.ActionWith ())
        (Test.Hspec.Core.Tree.Item ())])
  {- Strictness: m,
     Unfolding: ((GHC.Tuple.(), QuickcheckGenerateStringSpec.spec3)) -}
a75aa2319a669a1acb2e96a8341d9201
  spec20 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("test\\QuickcheckGenerateStringSpec.hs"#) -}
15cf3d26e04d1fdc7bd44665063c09db
  spec21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   QuickcheckGenerateStringSpec.$trModule2) -}
55c960314600a339abf165af3ef99295
  spec22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   QuickcheckGenerateStringSpec.$trModule4) -}
1062a3be5d137ec9125f2730b78e13a8
  spec23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   QuickcheckGenerateStringSpec.spec24) -}
6246d781477dcd894a4bcb8a6e6b4a3a
  spec24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("prop"#) -}
8e16237b8c3609a981e7ea793f040771
  spec25 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   QuickcheckGenerateStringSpec.spec28
                   QuickcheckGenerateStringSpec.spec26) -}
bae3c7c1ef538076bf64a830816e6ef0
  spec26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   QuickcheckGenerateStringSpec.spec27) -}
05bfdf943132606b71e9ada3e9c46f68
  spec27 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("quals"#) -}
714249c2da9010697deb791fa6c2e1a5
  spec28 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'e'#) -}
0cebdbf260d1edad992c0239bcb423ef
  spec29 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   QuickcheckGenerateStringSpec.spec32
                   QuickcheckGenerateStringSpec.spec30) -}
46c7fa9c18cca0473cd3a6ac6bf225ae
  spec3 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   QuickcheckGenerateStringSpec.spec4
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.Tree
                           (Test.Hspec.Core.Example.ActionWith ())
                           (Test.Hspec.Core.Tree.Item ())))) -}
f68485947b22293fb83cd69e5815bd63
  spec30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   QuickcheckGenerateStringSpec.spec31) -}
545f3da36b5a3874f48b4b1d64e505ef
  spec31 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("enerated single"#) -}
9c4296c9ab9650c07c9c829c25d97b31
  spec32 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'G'#) -}
f8d0538f88c4087fb80cd1093ebca02c
  spec4 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Strictness: m1,
     Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   QuickcheckGenerateStringSpec.spec29
                   QuickcheckGenerateStringSpec.spec5
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgProperty[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgProperty[0])))_R)_R])_R) -}
cd80d418bb30486a73a2592fe9298614
  spec5 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                   QuickcheckGenerateStringSpec.spec6
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.QuickCheck.Property.Property)))) -}
11a2fc256a794d1d5da8c5ba6f3f147b
  spec6 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
  {- Strictness: m3,
     Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                   QuickcheckGenerateStringSpec.spec7) -}
056ff98c2f2763e1bd87b596d49a00e5
  spec7 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
  {- Strictness: m,
     Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
                   QuickcheckGenerateStringSpec.spec25
                   QuickcheckGenerateStringSpec.spec10
                   GHC.Types.False
                   QuickcheckGenerateStringSpec.spec8
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
05f521b24f590b44c7c70bfe5541fdae
  spec8 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.QuickCheck.Property.Property
                   Test.Hspec.Core.Example.$fExampleProperty1
                     `cast`
                   (Trans
                        (<Test.QuickCheck.Property.Property>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R <Test.Hspec.Core.Example.ActionWith
                                 (Test.Hspec.Core.Example.Arg
                                    (() -> Test.QuickCheck.Property.Property))
                               -> GHC.Types.IO ()>_R
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Trans
                             (<Test.QuickCheck.Property.Property>_R
                              ->_R <Test.Hspec.Core.Example.Params>_R
                              ->_R ((Trans
                                         (Sub (Test.Hspec.Core.Example.D:R:Arg(->)[0] <()>_N))
                                         (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgProperty[0])))
                                     ->_R <GHC.Types.IO ()>_R)
                                    ->_R <GHC.Types.IO ()>_R)
                              ->_R <Test.Hspec.Core.Example.ProgressCallback
                                    -> GHC.Types.IO Test.Hspec.Core.Example.Result>_R)
                             (Sym (Test.Hspec.Core.Example.N:Example[0]
                                       <Test.QuickCheck.Property.Property>_N))))
                   QuickcheckGenerateStringSpec.spec9
                     `cast`
                   (Nth:3
                        (Trans
                             (Nth:3
                                  (Nth:3
                                       (Nth:3
                                            (Trans
                                                 (<Test.QuickCheck.Arbitrary.Arbitrary
                                                     [GHC.Types.Char]>_R
                                                  ->_R <GHC.Show.Show [GHC.Types.Char]>_R
                                                  ->_R <Test.QuickCheck.Property.Testable
                                                          (GHC.Base.String -> GHC.Types.Bool)>_R
                                                  ->_R <[GHC.Types.Char]
                                                        -> GHC.Base.String -> GHC.Types.Bool>_R
                                                  ->_R Trans
                                                           (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                     (Test.QuickCheck.Property.N:Prop[0])))
                                                           (Sym (Test.QuickCheck.Property.N:Property[0])))
                                                 (<Test.QuickCheck.Arbitrary.Arbitrary
                                                     [GHC.Types.Char]>_R
                                                  ->_R <GHC.Show.Show [GHC.Types.Char]>_R
                                                  ->_R <Test.QuickCheck.Property.Testable
                                                          (GHC.Base.String -> GHC.Types.Bool)>_R
                                                  ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                <[GHC.Types.Char]
                                                                 -> GHC.Base.String
                                                                 -> GHC.Types.Bool>_N))))))
                             (Test.QuickCheck.Property.N:Testable[0]
                                  <GHC.Base.String -> GHC.Base.String -> GHC.Types.Bool>_N)))) -}
a4e942e7cdd3fd4d4812e840156ce3c1
  spec9 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ [GHC.Types.Char]
                   @ (GHC.Base.String -> GHC.Types.Bool)
                   GHC.Show.$fShow[]_$s$fShow[]1
                   QuickcheckGenerateStringSpec.$s$fTestable(->)3
                     `cast`
                   (Trans
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                [GHC.Types.Char]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Char]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <[GHC.Types.Char] -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                [GHC.Types.Char]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Char]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <[GHC.Types.Char]
                                                            -> GHC.Types.Bool>_N))))))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                [GHC.Types.Char]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Char]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Base.String -> GHC.Types.Bool)>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <[GHC.Types.Char]
                                                       -> GHC.Base.String -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                [GHC.Types.Char]>_R
                                             ->_R <GHC.Show.Show [GHC.Types.Char]>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (GHC.Base.String -> GHC.Types.Bool)>_R
                                             ->_R <[GHC.Types.Char]
                                                   -> GHC.Base.String -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   QuickcheckGenerateStringSpec.$s$fTestable(->)5
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Char]>_R))
                   QuickcheckGenerateStringSpec.$s$fTestable(->)4
                   QuickcheckGenerateStringSpec.spec_f
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
7af3157ce98ac9cd4bd7d50716e04080
  spec_f :: [GHC.Types.Char] -> GHC.Base.String -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Base.String) (y :: GHC.Base.String) ->
                 GHC.Base.eqString
                   (GenerateString.generateSingle x y)
                   (GenerateString.generateSingle x y)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

