
==================== FINAL INTERFACE ====================
2018-01-25 22:29:34.9383866 UTC

interface fraktal-0.1.0.0-GzZsFpLbx8HKLd2sKxpFEj:DrawFractal 8022
  interface hash: 91fb85e5a3064eadcdddec3d7dd1b8c7
  ABI hash: 8dc6395fa7f532c7143c7de3c52d74b6
  export-list hash: ac209c3772c5d9de04cab51a2802795a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 877941c4fc294127ba0a30b68abe33e5
  sig of: Nothing
  used TH splices: False
  where
exports:
  DrawFractal.drawFractal
module dependencies:
package dependencies: GLURaw-2.0.0.3 GLUT-2.7.0.12
                      ObjectName-1.1.0.1 OpenGL-3.0.2.0 OpenGLRaw-3.2.7.0
                      StateVar-1.1.0.4 array-0.5.2.0 base-4.10.1.0 binary-0.8.5.1
                      bmp-1.2.6.3 bytestring-0.10.8.2 containers-0.5.10.2 deepseq-1.4.3.0
                      fixed-0.2.1.1 ghc-prim-0.5.1.1 gloss-1.11.1.1
                      gloss-rendering-1.11.1.1 half-0.2.2.3 integer-gmp-1.0.1.0
                      stm-2.4.4.1 text-1.2.2.2
orphans: gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Picture
         stm-2.4.4.1:Control.Monad.STM text-1.2.2.2:Data.Text
         binary-0.8.5.1:Data.Binary.Generic text-1.2.2.2:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         text-1.2.2.2:Data.Text
import  -/  base-4.10.1.0:GHC.Base 8f949d675e49677c272f02ab7a85fe18
import  -/  base-4.10.1.0:GHC.Real 183566a07f0c201dd54a6bc28c33ed14
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  gloss-1.11.1.1:Graphics.Gloss cb068117ff81ac607d6a68ef8bf834c7
import  -/  gloss-1.11.1.1:Graphics.Gloss.Data.Color 4124038a4add9113deb7b51a32d841f0
import  -/  gloss-1.11.1.1:Graphics.Gloss.Data.Display 481418d17f135c575a7078ace34fe017
import  -/  gloss-1.11.1.1:Graphics.Gloss.Interface.Pure.Display 52c264b96db22de1120cc52a42d4297e
import  -/  gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Picture 46309d19e6ae24eae0737e223f9a2514
eab9d991b8fae9318a963eed0f51fc5d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   DrawFractal.$trModule3
                   DrawFractal.$trModule1) -}
bee4feabd0f8a9ff59dc9650cce65b73
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS DrawFractal.$trModule2) -}
ab69c8fcd40fe1c6e3d54a63b70ea01a
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DrawFractal"#) -}
87474301e81bdf267e19d775e54c88b4
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS DrawFractal.$trModule4) -}
02d6f65d7cec378d64dd9b94bd5db180
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("fraktal-0.1.0.0-GzZsFpLbx8HKLd2sKxpFEj"#) -}
77f1923b486088523cc63672f2629aea
  drawFractal ::
    (GHC.Real.Real a2, GHC.Real.Real a1) =>
    [(a1, a2)] -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,U(A,A,C(U(U,U)))><L,U(A,A,C(U(U,U)))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                DrawFractal.drawFractal1
                  `cast`
                (forall (a :: <*>_N) (a1 :: <*>_N).
                 <GHC.Real.Real a1>_R
                 ->_R <GHC.Real.Real a>_R
                 ->_R <[(a, a1)]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
e110e8e3223e7ac4ef1e517a09551f1a
  drawFractal1 ::
    (GHC.Real.Real a2, GHC.Real.Real a1) =>
    [(a1, a2)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U(A,A,C(U(U,U)))><L,U(A,A,C(U(U,U)))><L,U><S,U>,
     Unfolding: (\ @ a
                   @ a1
                   ($dReal :: GHC.Real.Real a1)
                   ($dReal1 :: GHC.Real.Real a)
                   (list :: [(a, a1)])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Graphics.Gloss.Internals.Interface.Display.displayWithBackend1
                   @ Graphics.Gloss.Internals.Interface.Backend.GLUT.GLUTState
                   Graphics.Gloss.Internals.Interface.Backend.GLUT.$fBackendGLUTState
                   Graphics.Gloss.Internals.Interface.Backend.GLUT.glutStateInit
                   Graphics.Gloss.Data.Display.FullScreen
                   Graphics.Gloss.Data.Color.white
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    (# s,
                       Graphics.Gloss.Internals.Data.Picture.Line
                         (GHC.Base.map
                            @ (a, a1)
                            @ (GHC.Types.Float, GHC.Types.Float)
                            (\ (ds :: (a, a1)) ->
                             case ds of wild { (,) x y ->
                             (case GHC.Real.toRational
                                     @ a
                                     $dReal1
                                     x of wild2 { GHC.Real.:% n d ->
                              GHC.Float.rationalToFloat n d },
                              case GHC.Real.toRational
                                     @ a1
                                     $dReal
                                     y of wild2 { GHC.Real.:% n d ->
                              GHC.Float.rationalToFloat n d }) })
                            list) #))
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <Graphics.Gloss.Internals.Data.Picture.Picture>_R))
                   Graphics.Gloss.Interface.Pure.Display.display2
                     `cast`
                   (<Graphics.Gloss.Data.Controller.Controller>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   eta) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

